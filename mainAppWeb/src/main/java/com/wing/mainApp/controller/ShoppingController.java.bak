package com.wing.mainApp.controller;

import java.util.ArrayList;
import java.util.HashMap;

import 	javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import 	org.springframework.beans.factory.annotation.Autowired;
import 	org.springframework.stereotype.Controller;
import 	org.springframework.web.bind.annotation.RequestMapping;
import 	org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import com.com.wing.mainApp.dao.GoodsCartDAO;
import 	com.com.wing.mainApp.dao.GoodsManagerDAO;
import com.com.wing.mainApp.data.GoodsCartData;
import com.com.wing.mainApp.data.GoodsInfoData;
import 	com.com.wing.mainApp.util.StringUtil;

@Controller
public class ShoppingController {
	//	사용 DAO를 만든다.
	@Autowired
	GoodsManagerDAO	gmDao;
	//	다른 DAO도 같이 사용해야 하므로 한번더 선언한다.
	@Autowired
	GoodsCartDAO		cDao;
	
	
	/*
	 * 	상품 목록 보기 요청 
	 */
	@RequestMapping("/Shopping/GoodsList")
	public ModelAndView		goodsList(HttpServletRequest req) {
		ModelAndView		mv = new ModelAndView();
		//	파라메터 받기
		String	cate = req.getParameter("cate");
		//	필수가 아니다.
		
		//		보여줄 대 카테고리, 중 카테고리를 알아야 해당 카테고리를
		//		알아낼 수 있다.
		//	사용자가 보내준 카테고리를 이용해서 보여줄 대, 중 카테고리를 알아야 한다.
		String	lCate = "";
		String	mCate = "";		//	다음 카테고리를 선택할 현재 카테고리를
									//	기억할 변수
		
		//	상품 목록 검색을 위해서는 현재 상태가 어떤 상태인지
		//	(어떤 레벨의 카테고리를 선택했는지)를 알아야 한다.
		HashMap	map = new HashMap();
		//	1.	사용자가 카테고리를 보내주지 않은 경우
		if(StringUtil.isNull(cate)) {
			//	정책
			//		가장 첫번째 카테고리를 이용해서 처리할 예정이다.
			lCate = "L001";
			mCate = "L001M001";
			
			map.put("KIND", "LARGE");
			map.put("CODE", lCate);
		}
		//	2.	사용자가 대 카테고리를 선택한 경우
		else if(cate.length() == 4) {
			lCate = cate;
			//	정책
			//		사용자가 선택한 대 카테고리의 첫번째 중 카테고리로 정할 예정이다.
			mCate = cate + "M001";
			map.put("KIND", "LARGE");
			map.put("CODE", lCate);
		}
		//	3.	사용자가 중 카테고리를 선택한 경우
		else if(cate.length() == 8) {
			lCate = cate.substring(0, 4);
			mCate = cate;
			map.put("KIND", "MIDDLE");
			map.put("CODE", mCate);
		}
		//	4.	사용자가 소 카테고리를 선택한 경우
		else if(cate.length() == 12) {
			//	사용자가 보내준 소 카테고리를 이용해서 대, 중 카테고리를 선택한다.
			lCate = cate.substring(0, 4);
			mCate = cate.substring(0, 8);
			map.put("KIND", "SMALL");
			map.put("CODE", cate);
		}

		//	상품 카테고리 보여주기	
		ArrayList	lList = gmDao.getCate("", 1);
		ArrayList	mList = gmDao.getCate(lCate, 2);
		ArrayList	sList = gmDao.getCate(mCate, 3);
		
		//	상품목록 보여주기
		ArrayList	gList = gmDao.selectGoodsList(map);
		
		mv.addObject("CATE", cate);
		mv.addObject("LCATE", lList);
		mv.addObject("MCATE", mList);
		mv.addObject("SCATE", sList);
		mv.addObject("GOODS", gList);
		mv.setViewName("Shopping/GoodsList");
		return mv;
	}
	
	/*
	 * 	상품 상세보기
	 */
	@RequestMapping("/Shopping/GoodsView")
	public ModelAndView	goodsView(HttpServletRequest req) {
		ModelAndView		mv = new ModelAndView();
		//	할일
		//	파라메터 받기
		String	strNo = req.getParameter("no");
		int		no = Integer.parseInt(strNo);
		String	cate = req.getParameter("cate");
		
		//		데이터베이스에서 정보 꺼내기
		GoodsInfoData	data = gmDao.selectGoodsInfo(no);

		//		뷰에게 알려주기
		mv.addObject("DATA", data);
		mv.addObject("CATE",  cate);
		mv.setViewName("Shopping/GoodsView");
		return mv;
	}
	
	/*
	 * 	장바구니 담기 요청 실행 함수
	 */
	@RequestMapping("/Shopping/CartInsert")
	public ModelAndView		cartInsert(GoodsCartData data, HttpSession session) {
		ModelAndView		mv = new ModelAndView();
		//	할일
		//		파라메터 받고
		//		비회원제 이므로 세션id 구하고
		String	sessionID = session.getId();
		//	데이터 빈 클래스에 넣어놓자
		data.setId(sessionID);
		
		//		데이터베이스 처리한다.
		//		같은 사람이 같은 상품을 다시 장바구니에 담으면
		//		insert가 아닌 update를 하도록 하고 싶다.
		//	원리
		//		1.		먼저	그 사람이 그 물건을 장바구니에 담은 내역이 있는지 확인한다.
		int	count = cDao.selectCart(data);
		if(count != 0) {
			//		2.		내역이 있으면 update
			cDao.cartInfoChange(data, GoodsCartDAO.UPDATE);
		}
		else {
			//		3.		내역이 없으면 insert
			cDao.cartInfoChange(data, GoodsCartDAO.INSERT);
		}
		
		//		뷰를 부른다.
		RedirectView	rv = new RedirectView("../Shopping/GoodsView.dol");
		rv.addStaticAttribute("no", data.getNo());
		rv.addStaticAttribute("cate", data.getCate());
		mv.setView(rv);
		return mv;
	}
	
	/*
	 * 	장바구니 보기 요청 실행 함수
	 */
	@RequestMapping("/Shopping/CartView")
	public ModelAndView		cartView(HttpServletRequest req, HttpSession session) {
		ModelAndView		mv = new ModelAndView();
		//	파라메터 받고
		String	cate = req.getParameter("cate");
		
		String	sessionID = session.getId();
		
		//	데이터베이스에서 꺼내서
		ArrayList	list = cDao.selectCartList(sessionID);
		
		//	뷰에게 알려준다.
		mv.addObject("LIST", list);
		mv.addObject("CATE", cate);
		mv.setViewName("Shopping/CartView");
		return mv;
	}
	/*
	 * 	장바구니 수량 수정 요청 처리 함수
	 */
	@RequestMapping("/Shopping/CartCountUpdate")
	public ModelAndView	cartCountUpdate(GoodsCartData data, HttpSession session) {
		ModelAndView		mv = new ModelAndView();
		//	파라메터 받는다.
		String	sessionID = session.getId();
		
		//	데이터베이스를 수정한다.
		//	먼저 데이터 빈 클래스에 수정을 위한 데이터를 준비한다.
		//	상품번호, 수량은 이미 클라이언트가 보내주어서 가지고 있다.
		//	누가(sessionID)는 아직 없다.
		data.setId(sessionID);
		
		cDao.updateCartCount(data);
		
		//	뷰를 부른다.
		RedirectView	rv = new RedirectView("../Shopping/CartView.dol");
		rv.addStaticAttribute("cate", data.getCate());
		mv.setView(rv);
		return mv;
	}
	/*
	 * 	카트 삭제 요청 처리 함수
	 */
	@RequestMapping("/Shopping/CartDelete")
	public ModelAndView		cartDelete(GoodsCartData data, HttpSession session) {
		ModelAndView		mv = new ModelAndView();
		//	할일
		//		파라메터 받는다
		String	sessionID = session.getId();
		
		//		데이터베이스에서 삭제한다.
		data.setId(sessionID);
		cDao.deleteCart(data);
		
		//		뷰를 부른다.
		RedirectView		rv = new RedirectView("../Shopping/CartView.dol");
		rv.addStaticAttribute("cate", data.getCate());
		mv.setView(rv);
		return mv;
	}
}





